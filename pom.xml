<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.cb</groupId>
    <artifactId>CodingBookTesting</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>15</maven.compiler.source>
        <maven.compiler.target>15</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    </properties>
    <dependencies>
        <!--        Bonigarcia : Automatic Selenium WebDriver binaries management in runtime for Java.
                    We use onlune WebDriver with this dependency. so that we don't need to add WebDriver on computer -->
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>3.7.1</version>
        </dependency>

        <!--        SLF4J allows the end-user to plug in the desired logging framework at deployment time.
                    Note that SLF4J-enabling your library/application implies the addition of only a single mandatory dependency.-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.30</version>
            <scope>test</scope>
        </dependency>

        <!--To avoid no-operation logger implementation error. we need below dep. -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
            <scope>test</scope>
        </dependency>

        <!--        Selenium automates browsers.-->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>3.141.59</version>
        </dependency>

        <!--    Apache POI - Java API To Access Microsoft Format Files
                We use apachi.poi dependency to read and write data on excel. -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>4.0.1</version>
        </dependency>

        <!--        Cucumber â€“ a Behavior Driven Development (BDD) framework which is used with Selenium
                    for performing acceptance testing.        -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>5.7.0</version>
        </dependency>

        <!-- both up and down dependency should be the same version. -->

        <!--        This class tells JUnit to invoke Cucumber JUnit runner.
                    Executing this class as any JUnit test class will run
                    all the Features found on the classpath in the same package as this class.-->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>5.7.0</version>
        </dependency>

        <!--        Testing framework for Java-->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>7.1.0</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>com.aventstack</groupId>
            <artifactId>extentreports</artifactId>
            <version>4.0.9</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.aventstack</groupId>
            <artifactId>extentreports-cucumber4-adapter</artifactId>
            <version>1.0.7</version>
        </dependency>


        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version> 3.0.0-M1</version>

                <!--we can run how many feature files we want to test with threadCount. feature file numbers 1,2,3,4 etc.   -->
                <configuration>
                    <parallel>methods</parallel>
                    <threadCount>3</threadCount>
                    <forkMode>perthread</forkMode>
                    <testFailureIgnore>true</testFailureIgnore>

                    <!--            *Runner means, it will include runner classes name ends with runner.
                                    *.java means run all java files.-->
                    <includes>
                        <include>**/*.java</include>
                    </includes>
                </configuration>
            </plugin>

            <!--            Provides pretty html reports for Cucumber. It works by generating html from the cucumber json file.-->
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>3.10.0</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <!--                        We create Report path in our project. -->
                        <configuration>
                            <projectName>AutoTraders.com Smoke Test</projectName>
                            <outputDirectory>${project.build.directory}/myReports</outputDirectory>
                            <cucumberOutput>${project.build.directory}/cucumber.json</cucumberOutput>
                        </configuration>
                    </execution>

                </executions>
            </plugin>
        </plugins>
    </build>


</project>